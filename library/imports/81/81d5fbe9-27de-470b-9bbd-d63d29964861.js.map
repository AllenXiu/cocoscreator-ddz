{"version":3,"sources":["../../../../assets/Script/assets/Script/playing.js"],"names":["PokerObj","require","PlayerType","cc","Enum","left","right","player","dipai","shoupai","Class","extends","Component","properties","poker","Prefab","allPokers","leftPokers","rightPokers","playerPokers","dipaiPokers","leftPokersOut","rightPokersOut","playerPokersOut","pokerSpriteFrameMap","default","visible","maskBackground","Node","startBtn","Button","leftCount","Label","leftbuchu","leftShowPoker","rightCount","rightShowPoker","rightbuchu","playerHandCards","playerOutCards","playerAction","dipaiShowPoker","onLoad","loadRes","self","loader","SpriteAtlas","err","assets","console","log","sflist","getSpriteFrames","i","length","sf","_name","startPoker","active","enabled","loadAllPoker","refreshCount","showCards","shuffleArray","array","j","Math","random","temp","startUp","pokerSprite","bubbleSortCards","startDown","startPlayer","startDipai","type","showPoker","getComponent","showPokers","cards","instantiate","Poker","pokerName","creatCard","_imageName","Sprite","spriteFrame","size","pokerSpriteOne","PokerOne","pokerSpriteTwo","PokerTwo","gradeOne","_grade","gradeTwo","isExchange","type1","_bigType","type2","CardBigType","HEI_TAO","HONG_TAO","MEI_HUA","FANG_KUAI","string","start"],"mappings":"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","file":"playing.js","sourceRoot":"../../../../assets/Script","sourcesContent":["// Learn cc.Class:\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/class.html\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/class/index.html\n// Learn Attribute:\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/reference/attributes/index.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/life-cycle-callbacks/index.html\nvar PokerObj = require(\"Poker\");\n\nvar PlayerType = cc.Enum({\n    left: 0,\n    right: -1,\n    player: -1,\n    dipai: -1,\n    shoupai:-1\n})\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        poker: cc.Prefab, //扑克\n        allPokers: [], //所有牌\n        leftPokers: [], //左边牌\n        rightPokers: [], //右边牌\n        playerPokers: [], //玩家牌\n        dipaiPokers: [], //底牌\n        leftPokersOut: [], //左边打出牌\n        rightPokersOut: [], //右边打出牌\n        playerPokersOut: [], //玩家打出牌\n        pokerSpriteFrameMap: {\n            default: {},\n            visible: false,\n        },\n\n        //控制的东西\n        maskBackground:cc.Node,//开始前的遮罩\n        startBtn: cc.Button, //开始按钮\n        leftCount: cc.Label, //左边数量\n        leftbuchu:cc.Label,//左边不出\n        leftShowPoker:cc.Node,//左边展示Poker\n        rightCount: cc.Label, //右边数量\n        rightShowPoker:cc.Node,//右边展示Poker\n        rightbuchu:cc.Label,//右边不出\n\n        playerHandCards:cc.Node,//玩家手牌\n        playerOutCards:cc.Node,//玩家出牌\n        playerAction:cc.Node,//玩家按钮\n\n        dipaiShowPoker:cc.Node,//右边展示Poker\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad() {\n\n        this.loadRes();\n    },\n\n    //加载卡片资源\n    loadRes() {\n\n        let self = this;\n        cc.loader.loadRes('poker', cc.SpriteAtlas, function (err, assets) {\n            console.log('====' + assets);\n\n            let sflist = assets.getSpriteFrames();\n            for (let i = 0; i < sflist.length; i++) {\n                let sf = sflist[i];\n                self.pokerSpriteFrameMap[sf._name] = sf;\n            }\n            console.log(\"获取完全部Poker\")\n        });\n\n    },\n    //测试获取Poker\n    startPoker() {\n        //隐藏控件\n        this.maskBackground.active = false;\n        this.leftbuchu.enabled = false;\n        this.rightbuchu.enabled = false\n        this.playerAction.active = false;\n\n        this.loadAllPoker();\n\n        // let pokerSprite = cc.instantiate(this.poker);\n        // var pokerTypes = pokerSprite.getComponent('pokerTypes');\n        // pokerTypes.getCarAnalyseInfo(this.playerPokers);\n        this.refreshCount();\n        this.showCards(PlayerType.player);\n        \n    },\n    //洗牌算法\n    shuffleArray(array) {\n        for (var i = array.length - 1; i > 0; i--) {\n            // 在正数的时候相当于Math.floor()向下取整,负数的时候相当于Math.ceil()：\n            var j = (Math.random() * (i + 1)) | 0;\n            // console.log(j);\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n        return array;\n    },\n    //生成上家\n    startUp() {\n        for (let i = 0; i < 16; i++) {\n            let pokerSprite = this.allPokers[i + 16 + 3];\n            this.leftPokers[i] = pokerSprite;\n        }\n        this.bubbleSortCards(this.leftPokers);\n        // this.showPokers(this.leftPokers, PlayerType.left);\n\n    },\n    //生成下家\n    startDown() {\n        for (let i = 0; i < 16; i++) {\n            let pokerSprite = this.allPokers[i + 32 + 3];\n            this.rightPokers[i] = pokerSprite;\n        }\n        this.bubbleSortCards(this.rightPokers);\n        // this.showPokers(this.rightPokers, PlayerType.right);\n\n    },\n    //生成当前玩家\n    startPlayer() {\n        for (let i = 0; i < 16; i++) {\n            let pokerSprite = this.allPokers[i + 3];\n            this.playerPokers[i] = pokerSprite;\n        }\n        this.bubbleSortCards(this.playerPokers);\n        // this.showPokers(this.playerPokers, PlayerType.player);\n\n\n    },\n    //生成三张底牌\n    startDipai() {\n        for (let i = 0; i < 3; i++) {\n            let pokerSprite = this.allPokers[i];\n            this.dipaiPokers[i] = pokerSprite;\n        }\n        this.bubbleSortCards(this.dipaiPokers);\n        // this.showPokers(this.dipaiPokers, PlayerType.dipai);\n\n    },\n    showCards(type){\n        if (type == PlayerType.left) {\n            var showPoker = this.leftShowPoker.getComponent('ShowPoker');\n            showPoker.showPokers(this.leftPokers, PlayerType.left);\n        } else if (type == PlayerType.right) {\n            var showPoker = this.rightShowPoker.getComponent('ShowPoker');\n            showPoker.showPokers(this.rightPokers, PlayerType.right);\n        }  else if (type == PlayerType.player) {\n            var showPoker = this.playerHandCards.getComponent('ShowPoker');\n            showPoker.showPokers(this.playerPokers, PlayerType.player);\n        }  else if (type == PlayerType.shoupai) {\n            var showPoker = this.playerOutCards.getComponent('ShowPoker');\n        showPoker.showPokers(cards, PlayerType.shoupai);\n        } else{\n            var showPoker = this.dipaiShowPoker.getComponent('ShowPoker');\n            showPoker.showPokers(this.dipaiPokers, PlayerType.dipai);\n        }\n    },\n    loadAllPoker() {\n        for (let i = 0; i < 54; i++) {\n\n            let pokerSprite = cc.instantiate(this.poker);\n            var Poker = pokerSprite.getComponent('Poker');\n            var pokerName = Poker.creatCard(i + 1)._imageName;\n            // console.log(\"名称\" + pokerName);\n            pokerSprite.getComponent(cc.Sprite).spriteFrame = this.pokerSpriteFrameMap[pokerName];\n\n            this.allPokers[i] = pokerSprite;\n        }\n        //洗牌\n        this.allPokers = this.shuffleArray(this.allPokers);\n        //发牌\n        this.startDipai();\n        this.startUp();\n        this.startPlayer();\n        this.startDown();\n\n    },\n    /** \n     * 对牌进行排序，从小到大，使用冒泡排序，此种方法不是很好 \n     * \n     * @param cards \n     *            牌 \n     */\n    bubbleSortCards(cards) {\n        if (cards == null) {\n            return cards;\n        }\n        let size = cards.length;\n        // 冒泡排序,从左到右，从小到大  \n        for (var i = 0; i < size; i++) {\n            for (var j = 0; j < size - 1 - i; j++) {\n                let pokerSpriteOne = cards[j];\n                let PokerOne = pokerSpriteOne.getComponent('Poker');\n                let pokerSpriteTwo = cards[j + 1];\n                let PokerTwo = pokerSpriteTwo.getComponent('Poker');\n\n                var gradeOne = PokerOne._grade;\n                var gradeTwo = PokerTwo._grade;\n\n                var isExchange = false;\n                if (gradeOne < gradeTwo) {\n                    isExchange = true;\n                } else if (gradeOne == gradeTwo) {\n                    // 2张牌的grade相同  \n                    var type1 = PokerOne._bigType;\n                    var type2 = PokerTwo._bigType;\n\n                    // 从左到右，方块、梅花、红桃、黑桃  \n                    if (type1 == PokerObj.CardBigType.HEI_TAO) {\n                        isExchange = true;\n                    } else if (type1 == PokerObj.CardBigType.HONG_TAO) {\n                        if (type2 == PokerObj.CardBigType.MEI_HUA ||\n                            type2 == PokerObj.CardBigType.FANG_KUAI) {\n                            isExchange = true;\n                        }\n                    } else if (type1 == PokerObj.CardBigType.MEI_HUA) {\n                        if (type2 == PokerObj.CardBigType.FANG_KUAI) {\n                            isExchange = true;\n                        }\n                    }\n                }\n                if (isExchange) {\n                    cards[j + 1] = pokerSpriteOne;\n                    cards[j] = pokerSpriteTwo;\n                }\n            }\n        }\n        // console.log(\"我的牌\"+ cards);\n        return cards;\n    },\n    //刷新显示数量\n    refreshCount(){\n      this.leftCount.string = \"\"+ this.leftPokers.length-10;  \n      this.rightCount.string = \"\"+ this.rightPokers.length;\n    },\n\n    start() {\n\n    },\n\n    // update (dt) {\n\n    // },\n});"]}