{"version":3,"sources":["../../../../assets/Script/assets/Script/playing.js"],"names":["PokerObj","require","PlayerType","cc","Enum","left","right","player","dipai","Class","extends","Component","properties","poker","Prefab","startBtn","Button","leftCount","Label","rightCount","pokerSpriteFrameMap","default","visible","allPokers","leftPokers","rightPokers","playerPokers","dipaiPokers","leftPokersOut","rightPokersOut","playerPokersOut","onLoad","loadRes","self","loader","SpriteAtlas","err","assets","console","log","sflist","getSpriteFrames","i","length","sf","_name","startPoker","node","active","loadAllPoker","refreshCount","shuffleArray","array","j","Math","random","temp","startUp","pokerSprite","bubbleSortCards","showPokers","startDown","startPlayer","startDipai","instantiate","Poker","getComponent","pokerName","creatCard","_imageName","Sprite","spriteFrame","cards","size","pokerSpriteOne","PokerOne","pokerSpriteTwo","PokerTwo","gradeOne","_grade","gradeTwo","isExchange","type1","_bigType","type2","CardBigType","HEI_TAO","HONG_TAO","MEI_HUA","FANG_KUAI","type","startx","addChild","gap","scale","x","setPosition","string","start"],"mappings":"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","file":"playing.js","sourceRoot":"../../../../assets/Script","sourcesContent":["// Learn cc.Class:\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/class.html\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/class/index.html\n// Learn Attribute:\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/reference/attributes/index.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/life-cycle-callbacks/index.html\nvar PokerObj = require(\"Poker\");\n\nvar PlayerType = cc.Enum({\n    left: 0,\n    right: -1,\n    player: -1,\n    dipai: -1,\n})\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        poker: cc.Prefab, //扑克\n        startBtn: cc.Button, //开始按钮\n        leftCount: cc.Label, //左边数量\n        rightCount: cc.Label, //右边数量\n        pokerSpriteFrameMap: {\n            default: {},\n            visible: false,\n        },\n        allPokers: [], //所有牌\n        leftPokers: [], //左边牌\n        rightPokers: [], //右边牌\n        playerPokers: [], //玩家牌\n        dipaiPokers: [], //底牌\n        leftPokersOut: [], //左边打出牌\n        rightPokersOut: [], //右边打出牌\n        playerPokersOut: [], //玩家打出牌\n\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad() {\n        this.loadRes();\n    },\n\n    //加载卡片资源\n    loadRes() {\n\n        let self = this;\n        cc.loader.loadRes('poker', cc.SpriteAtlas, function (err, assets) {\n            console.log('====' + assets);\n\n            let sflist = assets.getSpriteFrames();\n            for (let i = 0; i < sflist.length; i++) {\n                let sf = sflist[i];\n                self.pokerSpriteFrameMap[sf._name] = sf;\n            }\n            console.log(\"获取完全部Poker\")\n        });\n\n    },\n    //测试获取Poker\n    startPoker() {\n        this.startBtn.node.active = false;\n        this.loadAllPoker();\n\n        // let pokerSprite = cc.instantiate(this.poker);\n        // var pokerTypes = pokerSprite.getComponent('pokerTypes');\n        // pokerTypes.getCarAnalyseInfo(this.playerPokers);\n        this.refreshCount();\n\n    },\n    //洗牌算法\n    shuffleArray(array) {\n        for (var i = array.length - 1; i > 0; i--) {\n            // 在正数的时候相当于Math.floor()向下取整,负数的时候相当于Math.ceil()：\n            var j = (Math.random() * (i + 1)) | 0;\n            // console.log(j);\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n        return array;\n    },\n    //生成上家\n    startUp() {\n        for (let i = 0; i < 16; i++) {\n            let pokerSprite = this.allPokers[i + 16 + 3];\n            this.leftPokers[i] = pokerSprite;\n        }\n        this.bubbleSortCards(this.leftPokers);\n        this.showPokers(this.leftPokers, PlayerType.left);\n    },\n    //生成下家\n    startDown() {\n        for (let i = 0; i < 16; i++) {\n            let pokerSprite = this.allPokers[i + 32 + 3];\n            this.rightPokers[i] = pokerSprite;\n        }\n        this.bubbleSortCards(this.rightPokers);\n        this.showPokers(this.rightPokers, PlayerType.right);\n    },\n    //生成当前玩家\n    startPlayer() {\n        for (let i = 0; i < 16; i++) {\n            let pokerSprite = this.allPokers[i + 3];\n            this.playerPokers[i] = pokerSprite;\n        }\n        this.bubbleSortCards(this.playerPokers);\n        this.showPokers(this.playerPokers, PlayerType.player);\n    },\n    //生成三张底牌\n    startDipai() {\n        for (let i = 0; i < 3; i++) {\n            let pokerSprite = this.allPokers[i];\n            this.dipaiPokers[i] = pokerSprite;\n        }\n        this.bubbleSortCards(this.dipaiPokers);\n        this.showPokers(this.dipaiPokers, PlayerType.dipai);\n    },\n\n    loadAllPoker() {\n        for (let i = 0; i < 54; i++) {\n\n            let pokerSprite = cc.instantiate(this.poker);\n            var Poker = pokerSprite.getComponent('Poker');\n            var pokerName = Poker.creatCard(i + 1)._imageName;\n            // console.log(\"名称\" + pokerName);\n            pokerSprite.getComponent(cc.Sprite).spriteFrame = this.pokerSpriteFrameMap[pokerName];\n\n            this.allPokers[i] = pokerSprite;\n        }\n        //洗牌\n        this.allPokers = this.shuffleArray(this.allPokers);\n        //发牌\n        this.startUp();\n        this.startPlayer();\n        this.startDown();\n        this.startDipai();\n    },\n    /** \n     * 对牌进行排序，从小到大，使用冒泡排序，此种方法不是很好 \n     * \n     * @param cards \n     *            牌 \n     */\n    bubbleSortCards(cards) {\n        if (cards == null) {\n            return cards;\n        }\n        let size = cards.length;\n        // 冒泡排序,从左到右，从小到大  \n        for (var i = 0; i < size; i++) {\n            for (var j = 0; j < size - 1 - i; j++) {\n                let pokerSpriteOne = cards[j];\n                let PokerOne = pokerSpriteOne.getComponent('Poker');\n                let pokerSpriteTwo = cards[j + 1];\n                let PokerTwo = pokerSpriteTwo.getComponent('Poker');\n\n                var gradeOne = PokerOne._grade;\n                var gradeTwo = PokerTwo._grade;\n\n                var isExchange = false;\n                if (gradeOne < gradeTwo) {\n                    isExchange = true;\n                } else if (gradeOne == gradeTwo) {\n                    // 2张牌的grade相同  \n                    var type1 = PokerOne._bigType;\n                    var type2 = PokerTwo._bigType;\n\n                    // 从左到右，方块、梅花、红桃、黑桃  \n                    if (type1 == PokerObj.CardBigType.HEI_TAO) {\n                        isExchange = true;\n                    } else if (type1 == PokerObj.CardBigType.HONG_TAO) {\n                        if (type2 == PokerObj.CardBigType.MEI_HUA ||\n                            type2 == PokerObj.CardBigType.FANG_KUAI) {\n                            isExchange = true;\n                        }\n                    } else if (type1 == PokerObj.CardBigType.MEI_HUA) {\n                        if (type2 == PokerObj.CardBigType.FANG_KUAI) {\n                            isExchange = true;\n                        }\n                    }\n                }\n                if (isExchange) {\n                    cards[j + 1] = pokerSpriteOne;\n                    cards[j] = pokerSpriteTwo;\n                }\n            }\n        }\n        // console.log(\"我的牌\"+ cards);\n        return cards;\n    },\n\n    //展示Poker\n    showPokers(cards, type) {\n        let startx = cards.length / 2; //开始x坐标\n        for (let i = 0; i < cards.length; i++) {\n\n            let pokerSprite = cards[i];\n            var Poker = pokerSprite.getComponent('Poker');\n            this.node.addChild(pokerSprite);\n            if (type == PlayerType.left) {\n                let gap = 12; //牌间隙\n                pokerSprite.scale = 0.6;\n                let x = (-startx) * gap + i * gap + gap/2;\n                // console.log(x);\n                pokerSprite.setPosition(-300 + x, 100);\n            } else if (type == PlayerType.right) {\n                let gap = 12; //牌间隙\n                pokerSprite.scale = 0.6;\n                let x = (-startx) * gap + i * gap + gap/2;\n                // console.log(x);\n                pokerSprite.setPosition(300 + x, 100);\n            } else if (type == PlayerType.dipai) {\n                let gap = 100; //牌间隙\n                pokerSprite.scale = 0.6;\n                let x = (-startx) * gap + gap/2 + i * gap;\n                // console.log(x);\n                pokerSprite.setPosition(x, 300);\n            } else {\n                let gap = 25; //牌间隙\n                pokerSprite.scale = 1;\n                let x = (-startx) * gap + i * gap + gap/2;\n                // console.log(x);\n                pokerSprite.setPosition(x, -220);\n            }\n\n        }\n\n    },\n    //刷新显示数量\n    refreshCount(){\n      this.leftCount.string = \"\"+ this.leftPokers.length-10;  \n      this.rightCount.string = \"\"+ this.rightPokers.length;\n    },\n\n    start() {\n\n    },\n\n    // update (dt) {\n\n    // },\n});"]}