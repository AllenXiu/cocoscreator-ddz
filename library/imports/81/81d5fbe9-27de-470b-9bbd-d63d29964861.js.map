{"version":3,"sources":["../../../../assets/Script/assets/Script/playing.js"],"names":["PokerObj","require","PlayerType","cc","Enum","left","right","player","Class","extends","Component","properties","poker","Prefab","startBtn","Button","pokerSpriteFrameMap","default","visible","allPokers","leftPokers","RightPokers","playerPokers","onLoad","loadRes","self","loader","SpriteAtlas","err","assets","console","log","sflist","getSpriteFrames","i","length","sf","_name","startPoker","node","active","loadAllPoker","shuffleArray","array","j","Math","random","temp","startUp","startDown","startPlayer","pokerSprite","bubbleSortCards","showPokers","instantiate","Poker","getComponent","pokerName","creatCard","_imageName","Sprite","spriteFrame","cards","size","pokerSpriteOne","PokerOne","pokerSpriteTwo","PokerTwo","gradeOne","_grade","gradeTwo","isExchange","type1","_bigType","type2","CardBigType","HEI_TAO","HONG_TAO","MEI_HUA","FANG_KUAI","type","startx","gap","scale","addChild","x","setPosition","start"],"mappings":"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","file":"playing.js","sourceRoot":"../../../../assets/Script","sourcesContent":["// Learn cc.Class:\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/class.html\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/class/index.html\n// Learn Attribute:\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/reference/attributes/index.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/life-cycle-callbacks/index.html\nvar PokerObj = require(\"Poker\");\n\nvar PlayerType = cc.Enum({\n    left:0,\n    right:-1,\n    player:-1,\n})\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        poker: cc.Prefab, //扑克\n        startBtn: cc.Button, //开始按钮\n        pokerSpriteFrameMap: {\n            default: {},\n            visible: false,\n        },\n        allPokers: [], //所有牌\n        leftPokers: [], //左边牌\n        RightPokers: [], //右边牌\n        playerPokers: [], //玩家牌\n        leftPokers: [], //左边打出牌\n        RightPokers: [], //右边打出牌\n        playerPokers: [], //玩家打出牌\n\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad() {\n        this.loadRes();\n    },\n\n    //加载卡片资源\n    loadRes() {\n\n        let self = this;\n        cc.loader.loadRes('poker', cc.SpriteAtlas, function (err, assets) {\n            console.log('====' + assets);\n\n            let sflist = assets.getSpriteFrames();\n            for (let i = 0; i < sflist.length; i++) {\n                let sf = sflist[i];\n                self.pokerSpriteFrameMap[sf._name] = sf;\n            }\n            console.log(\"获取完全部Poker\")\n        });\n\n    },\n    //测试获取Poker\n    startPoker() {\n        this.startBtn.node.active = false;\n        this.loadAllPoker();\n\n    },\n    //洗牌算法\n    shuffleArray(array) {\n        for (var i = array.length - 1; i > 0; i--) {\n            // 在正数的时候相当于Math.floor()向下取整,负数的时候相当于Math.ceil()：\n            var j = (Math.random() * (i + 1)) | 0;\n            // console.log(j);\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n        return array;\n    },\n    //生成上家\n    startUp() {\n\n    },\n    //生成上家\n    startDown() {\n\n    },\n    //生成当前玩家\n    startPlayer() {\n        for (let i = 0; i < 16; i++) {\n            let pokerSprite = this.allPokers[i];\n            this.playerPokers[i] = pokerSprite;\n        }\n        this.bubbleSortCards(this.playerPokers);\n        this.showPokers(this.playerPokers,PlayerType.player);\n    },\n    loadAllPoker() {\n        for (let i = 0; i < 54; i++) {\n\n            let pokerSprite = cc.instantiate(this.poker);\n            var Poker = pokerSprite.getComponent('Poker');\n            var pokerName = Poker.creatCard(i + 1)._imageName;\n            // console.log(\"名称\" + pokerName);\n            pokerSprite.getComponent(cc.Sprite).spriteFrame = this.pokerSpriteFrameMap[pokerName];\n\n            this.allPokers[i] = pokerSprite;\n        }\n        //洗牌\n        this.allPokers = this.shuffleArray(this.allPokers);\n\n        this.startPlayer();\n    },\n    /** \n     * 对牌进行排序，从小到大，使用冒泡排序，此种方法不是很好 \n     * \n     * @param cards \n     *            牌 \n     */\n    bubbleSortCards(cards) {\n        if (cards == null) {\n            return cards;\n        }\n        let size = cards.length;\n        // 冒泡排序,从左到右，从小到大  \n        for (var i = 0; i < size; i++) {\n            for (var j = 0; j < size - 1 - i; j++) {\n                let pokerSpriteOne = cards[j];\n                let PokerOne = pokerSpriteOne.getComponent('Poker');\n                let pokerSpriteTwo = cards[j + 1];\n                let PokerTwo = pokerSpriteTwo.getComponent('Poker');\n\n                var gradeOne = PokerOne._grade;\n                var gradeTwo = PokerTwo._grade;\n\n                var isExchange = false;\n                if (gradeOne < gradeTwo) {\n                    isExchange = true;\n                } else if (gradeOne == gradeTwo) {\n                    // 2张牌的grade相同  \n                    var type1 = PokerOne._bigType;\n                    var type2 = PokerTwo._bigType;\n\n                    // 从左到右，方块、梅花、红桃、黑桃  \n                    if (type1 == PokerObj.CardBigType.HEI_TAO) {\n                        isExchange = true;\n                    } else if (type1 == PokerObj.CardBigType.HONG_TAO) {\n                        if (type2 == PokerObj.CardBigType.MEI_HUA ||\n                            type2 == PokerObj.CardBigType.FANG_KUAI) {\n                            isExchange = true;\n                        }\n                    } else if (type1 == PokerObj.CardBigType.MEI_HUA) {\n                        if (type2 == PokerObj.CardBigType.FANG_KUAI) {\n                            isExchange = true;\n                        }\n                    }\n                }\n                if (isExchange) {\n                    cards[j + 1] = pokerSpriteOne;\n                    cards[j] = pokerSpriteTwo;\n                }\n            }\n        }\n        // console.log(\"我的牌\"+ cards);\n        return cards;\n    },\n\n    //展示Poker\n    showPokers(cards ,type){\n        if (type == PlayerType.left) {\n            \n        } else if (type == PlayerType.right){\n            \n        }else{\n            let startx = cards.length / 2; //开始x坐标\n            for (let i = 0; i < cards.length; i++) {\n    \n                let pokerSprite = cards[i];\n                var Poker = pokerSprite.getComponent('Poker');\n                // console.log(\"名称\" + Poker._imageName);\n    \n                let gap = 25; //牌间隙\n                pokerSprite.scale = 1;\n    \n                this.node.addChild(pokerSprite);\n                let x = (-startx) * gap + i * gap;\n                // console.log(x);\n                pokerSprite.setPosition(x, -220);\n            }\n        }\n        \n    },\n    start() {\n\n    },\n\n    // update (dt) {},\n});"]}