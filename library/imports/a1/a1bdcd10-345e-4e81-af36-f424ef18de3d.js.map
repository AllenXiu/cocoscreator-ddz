{"version":3,"sources":["../../../../assets/Script/assets/Script/playerAction.js"],"names":["pokerTypes","require","cc","Class","extends","Component","properties","buchuBtn","Button","tishiBtn","chupaiBtn","start","buchuAction","mes","playerIndex","Global","roomIndex","roomNum","Network","socket","emit","stringifyJson","node","active","chupaiAction","pokers","selectPokers","type","sortByLength","pokerData","Array","card","poker","getComponent","cardId","_cardId","push","cardsType"],"mappings":";;;;;;AAAA,IAAIA,aAAaC,QAAQ,YAAR,CAAjB;AACAC,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACRC,kBAAUL,GAAGM,MADL;AAERC,kBAAUP,GAAGM,MAFL;AAGRE,mBAAWR,GAAGM;AAHN,KAHP;;AASL;;AAEA;;AAEAG,SAbK,mBAaI,CAER,CAfI;AAgBLC,eAhBK,yBAgBQ;AACT,YAAIC,MAAM,EAACC,aAAYC,OAAOC,SAApB,EAA8BC,SAASF,OAAOE,OAA9C,EAAV;;AAEAC,gBAAQC,MAAR,CAAeC,IAAf,CAAoB,OAApB,EAA8BF,QAAQG,aAAR,CAAsBR,GAAtB,CAA9B;;AAEA,aAAKS,IAAL,CAAUC,MAAV,GAAmB,KAAnB;AACH,KAtBI;AAuBLC,gBAvBK,0BAuBS;AACX,YAAIC,SAASV,OAAOW,YAApB;AACA,YAAIC,OAAO3B,WAAW4B,YAAX,CAAwBH,MAAxB,CAAX;AACA,YAAII,YAAY,IAAIC,KAAJ,EAAhB;AAHW;AAAA;AAAA;;AAAA;AAIX,iCAAmBL,MAAnB,8HAA2B;AAAA,oBAAhBM,IAAgB;;AAC1B,oBAAIC,QAAQD,KAAKE,YAAL,CAAkB,OAAlB,CAAZ;AACA;AACA,oBAAIC,SAASF,MAAMG,OAAnB;AACAN,0BAAUO,IAAV,CAAeF,MAAf;AACA;AATU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAWX,YAAIrB,MAAM,EAACY,QAAOI,SAAR,EAAkBQ,WAAUV,IAA5B,EAAiCV,SAASF,OAAOE,OAAjD,EAAyDH,aAAYC,OAAOC,SAA5E,EAAV;;AAEAE,gBAAQC,MAAR,CAAeC,IAAf,CAAoB,QAApB,EAA+BF,QAAQG,aAAR,CAAsBR,GAAtB,CAA/B;AAEF;AAtCI;;AAwCL;AAxCJ","file":"playerAction.js","sourceRoot":"../../../../assets/Script","sourcesContent":["var pokerTypes = require('pokerTypes');\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        buchuBtn: cc.Button, \n        tishiBtn: cc.Button, \n        chupaiBtn: cc.Button, \n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {},\n\n    start () {\n\n    },\n    buchuAction(){\n        let mes = {playerIndex:Global.roomIndex,roomNum: Global.roomNum};\n\n        Network.socket.emit('buchu',  Network.stringifyJson(mes));\n\n        this.node.active = false;\n    },\n    chupaiAction(){\n       let pokers = Global.selectPokers;\n       var type = pokerTypes.sortByLength(pokers);\n       var pokerData = new Array();\n       for (const card of pokers) {\n        var poker = card.getComponent('Poker');\n        debugger;\n        let cardId = poker._cardId;\n        pokerData.push(cardId);\n       }\n\n       let mes = {pokers:pokerData,cardsType:type,roomNum: Global.roomNum,playerIndex:Global.roomIndex,};\n\n       Network.socket.emit('chupai',  Network.stringifyJson(mes));\n\n    },\n\n    // update (dt) {},\n});\n"]}