{"version":3,"sources":["playerAction.js"],"names":["pokerTypes","require","cc","Class","extends","Component","properties","buchuBtn","Button","tishiBtn","chupaiBtn","start","setBuchu","isFirst","active","buchuAction","Global","mes","playerIndex","roomIndex","roomNum","Network","socket","emit","stringifyJson","node","chupaiAction","pokers","selectPokers","bubbleSortCards","length","console","log","thisType","sortByLength","lastType","lastPokerType","comparePokers","alert","pokerData","Array","card","poker","getComponent","cardId","_cardId","push","cardsType"],"mappings":";;;;;;AAAA,IAAIA,aAAaC,QAAQ,YAAR,CAAjB;AACAC,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACRC,kBAAUL,GAAGM,MADL;AAERC,kBAAUP,GAAGM,MAFL;AAGRE,mBAAWR,GAAGM;AAHN,KAHP;;AASL;;AAEA;;AAEAG,SAbK,mBAaI,CAER,CAfI;;AAgBL;;;;AAIAC,YApBK,oBAoBIC,OApBJ,EAoBY;AACb,YAAGA,OAAH,EAAW;AACP,iBAAKN,QAAL,CAAcO,MAAd,GAAuB,KAAvB;AACH,SAFD,MAEK;AACD,iBAAKP,QAAL,CAAcO,MAAd,GAAuB,IAAvB;AACH;AACJ,KA1BI;AA2BLC,eA3BK,yBA2BQ;AACT;AACA,YAAIC,OAAOH,OAAX,EAAoB;AAChB;AACH;AACD,YAAII,MAAM,EAACC,aAAYF,OAAOG,SAApB,EAA8BC,SAASJ,OAAOI,OAA9C,EAAV;;AAEAC,gBAAQC,MAAR,CAAeC,IAAf,CAAoB,OAApB,EAA8BF,QAAQG,aAAR,CAAsBP,GAAtB,CAA9B;;AAEA,aAAKQ,IAAL,CAAUX,MAAV,GAAmB,KAAnB;AACH,KArCI;AAsCLY,gBAtCK,0BAsCS;AACX,YAAIC,SAASX,OAAOY,YAApB;AACA5B,mBAAW6B,eAAX,CAA2BF,MAA3B;AACA,YAAIA,OAAOG,MAAP,IAAiB,CAArB,EAAwB;AACpB;AACAC,oBAAQC,GAAR,CAAY,MAAZ;AACA;AACH;AACD,YAAIC,WAAWjC,WAAWkC,YAAX,CAAwBP,MAAxB,CAAf;AACA,YAAIM,YAAY,EAAhB,EAAoB;AAChB;AACAF,oBAAQC,GAAR,CAAY,MAAZ;AACA;AACH;AACK;AACT;AACA;AACA,YAAIhB,OAAOH,OAAP,IAAkB,KAAtB,EAA6B;AACzB,gBAAIsB,WAAWnB,OAAOoB,aAAtB;AACA,gBAAIpC,WAAWqC,aAAX,CAAyBF,QAAzB,EAAkCF,QAAlC,KAA+C,KAAnD,EAA0D;AACtDF,wBAAQC,GAAR,CAAY,UAAZ;AACAM,sBAAM,UAAN;AACD;AACF;AACJ;AACE,YAAIC,YAAY,IAAIC,KAAJ,EAAhB;AAzBW;AAAA;AAAA;;AAAA;AA0BX,iCAAmBb,MAAnB,8HAA2B;AAAA,oBAAhBc,IAAgB;;AAC1B,oBAAIC,QAAQD,KAAKE,YAAL,CAAkB,OAAlB,CAAZ;AACA,oBAAIC,SAASF,MAAMG,OAAnB;AACAN,0BAAUO,IAAV,CAAeF,MAAf;AACA;AA9BU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgCX,YAAI3B,MAAM,EAACU,QAAOY,SAAR,EAAkBQ,WAAUd,QAA5B,EAAqCb,SAASJ,OAAOI,OAArD,EAA6DF,aAAYF,OAAOG,SAAhF,EAAV;;AAEAE,gBAAQC,MAAR,CAAeC,IAAf,CAAoB,QAApB,EAA+BF,QAAQG,aAAR,CAAsBP,GAAtB,CAA/B;AAEF;AA1EI;;AA4EL;AA5EJ","file":"playerAction.js","sourceRoot":"../../../../assets/Script","sourcesContent":["var pokerTypes = require('pokerTypes');\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        buchuBtn: cc.Button, \n        tishiBtn: cc.Button, \n        chupaiBtn: cc.Button, \n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    // onLoad () {},\n\n    start () {\n\n    },\n    /**\n     * 检查是否为第一次出牌，隐藏不出按钮\n     * @param {是否为第一次出牌} isFirst \n     */\n    setBuchu(isFirst){\n        if(isFirst){\n            this.buchuBtn.active = false;\n        }else{\n            this.buchuBtn.active = true;\n        }\n    },\n    buchuAction(){\n        //首次出牌不允许不出\n        if (Global.isFirst) {\n            return;\n        }\n        let mes = {playerIndex:Global.roomIndex,roomNum: Global.roomNum};\n\n        Network.socket.emit('buchu',  Network.stringifyJson(mes));\n\n        this.node.active = false;\n    },\n    chupaiAction(){\n       let pokers = Global.selectPokers;\n       pokerTypes.bubbleSortCards(pokers);\n       if (pokers.length == 0) {\n           //牌型不符合\n           console.log(\"未选择牌\");\n           return;\n       }\n       var thisType = pokerTypes.sortByLength(pokers);\n       if (thisType == 14) {\n           //牌型不符合\n           console.log(\"牌型错误\");\n           return;\n       }\n             //判断当前牌是否大于上一手\n    //    Global.isFirst = isFirst;\n    //    Global.lastPokerType = data.lastPokerType;\n    if (Global.isFirst == false) {\n        let lastType=  Global.lastPokerType;\n        if (pokerTypes.comparePokers(lastType,thisType) == false) {\n            console.log(\"牌型错误或者小于\");\n            alert(\"牌型错误或者小于\");\n           return;\n        }\n    }\n       var pokerData = new Array();\n       for (const card of pokers) {\n        var poker = card.getComponent('Poker');\n        let cardId = poker._cardId;\n        pokerData.push(cardId);\n       }\n\n       let mes = {pokers:pokerData,cardsType:thisType,roomNum: Global.roomNum,playerIndex:Global.roomIndex};\n\n       Network.socket.emit('chupai',  Network.stringifyJson(mes));\n\n    },\n\n    // update (dt) {},\n});\n"]}