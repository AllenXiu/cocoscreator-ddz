{"version":3,"sources":["pokerTypes.js"],"names":["CardType","cc","Enum","c1","c2","c20","c3","c4","c31","c32","c411","c422","c123","c1122","c111222","c11122234","c1112223344","c0","Class","extends","Component","properties","getGrade","card","getComponent","_grade","getCarAnalyseInfo","cards","oneArray","twoArray","threeArray","fourArray","i","length","sameCount","grade","j","grade1","checkElementIsContain","push","allInfo","console","log","element","array"],"mappings":"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","file":"pokerTypes.js","sourceRoot":"../../../../assets/Script","sourcesContent":["/**\n * 牌型\n　　火箭：即双王（大王和小王），最大的牌。\n　　炸弹：四张点数相同的牌，如：7777。\n　　单牌：任意一张单牌。\n　　对牌：任意两张点数相同的牌。\n　　三张：任意三张点数相同的牌，如888。\n　　三带一：点数相同的三张牌+一张单牌或一对牌。如：333+6 或 444+99。\n　　单顺：任意五张或五张以上点数相连的牌，如：45678或78910JQK。不包括 2和双王。\n　　双顺：三对或更多的连续对牌，如：334455、7788991010JJ。不包括 2 点和双王。\n　　三顺：二个或更多的连续三张牌，如：333444 、555666777888。不包括 2 点和双王。\n　　飞机带翅膀：三顺＋同数量的单牌或同数量的对牌。如：444555+79 或333444555+7799JJ\n　　四带二：四张牌＋两手牌。（注意：四带二不是炸弹）。如：5555＋3＋8 或 4444＋55＋77 。\n */\n\nvar CardType = cc.Enum({\n    c1: 0, //单牌。  \n    c2: -1, //对子。 \n    c20: -1, //王炸。  \n    c3: -1, //3不带。  \n    c4: -1, //炸弹。  \n    c31: -1, //3带1。  \n    c32: -1, //3带2。  \n    c411: -1, //4带2个单，或者一对  \n    c422: -1, //4带2对  \n    c123: -1, //顺子。  \n    c1122: -1, //连队。  \n    c111222: -1, //飞机。  \n    c11122234: -1, //飞机带单排.  \n    c1112223344: -1, //飞机带对子.  \n    c0: -1 //不能出牌  \n});\ncc.Class({\n            extends: cc.Component,\n\n            properties: {},\n\n            //获取牌的等级\n            getGrade(card) {\n                return card.getComponent('Poker')._grade;\n            },\n\n            //牌生成一个反应数量的数组\n            getCarAnalyseInfo(cards) {\n\n                var oneArray = [];\n                var twoArray = [];\n                var threeArray = [];\n                var fourArray = [];\n\n\n                debugger;\n                for (let i = 0; i < cards.length; i++) {\n                    var sameCount = 1;\n                    var grade = this.getGrade(cards[i]);\n\n                    for (let j = i + 1; j < cards.length; j++) {\n                        var grade1 = this.getGrade(cards[j]);\n                        if (grade == grade1) {\n                            sameCount++;\n                        }\n                    }\n\n                    switch (sameCount) {\n                        case 1:\n                        if (!this.checkElementIsContain(grade,oneArray)) {\n                            oneArray.push(grade);\n                        }\n                            \n                            break;\n                        case 2:\n                        if (!this.checkElementIsContain(grade,twoArray)) {\n                            twoArray.push(grade);\n                        }\n\n                            break;\n                        case 3:\n                        if (!this.checkElementIsContain(grade,threeArray)) {\n                            threeArray.push(grade);\n                        }\n                            break;\n                        case 4:\n                        if (!this.checkElementIsContain(grade,fourArray)) {\n                            fourArray.push(grade);\n                        }\n                            break;\n                        default:\n                            break;\n                    }\n                };\n                var allInfo = [oneArray,twoArray,threeArray,fourArray];\n                console.log(allInfo)\n            },\n            //检查数组是否包含元素\n            checkElementIsContain(element, array) {\n                \n                for (const grade of array) {\n                    if (grade == element) {\n                        return true;\n                    }\n                }\n                return false;\n            },\n        \n        });"]}