{"version":3,"sources":["NetWork.js"],"names":["instance","Network","cc","Class","properties","socket","initNetwork","socketIo","io","connect","send","type","sendData","callback","sys","isNative","JSON","stringify","emit","on","data","parse","once","receive","window"],"mappings":";;;;;;AAAA,IAAIA,WAAW,IAAf;AACA,IAAIC,UAAUC,GAAGC,KAAH,CAAS;AACnBC,gBAAY;AACRC,gBAAQ;AADA,KADO;AAInBC,eAJmB,yBAIL;AACV,YAAIC,WAAWC,GAAGC,OAAH,CAAW,mBAAX,CAAf;AACA,aAAKJ,MAAL,GAAcE,QAAd;AACH,KAPkB;;AAQnB;AACAG,UAAM,cAAUC,IAAV,EAAgBC,QAAhB,EAA0BC,QAA1B,EAAoC;AACtC,YAAIX,GAAGY,GAAH,CAAOC,QAAX,EAAqB;AACjBH,uBAAWI,KAAKC,SAAL,CAAeL,QAAf,CAAX;AACH;AACD,aAAKP,MAAL,CAAYa,IAAZ,CAAiBP,IAAjB,EAAuBC,QAAvB;AACA;AACA;AACA,YAAIV,GAAGY,GAAH,CAAOC,QAAX,EAAqB;AACjB,iBAAKV,MAAL,CAAYc,EAAZ,CAAeR,IAAf,EAAqB,UAAUS,IAAV,EAAgB;AACjC,oBAAIlB,GAAGY,GAAH,CAAOC,QAAX,EAAqB;AACjBK,2BAAOJ,KAAKK,KAAL,CAAWD,IAAX,CAAP;AACH;AACDP,yBAASO,QAAQ,IAAjB;AACH,aALD;AAMH,SAPD,MAOO;AACH,iBAAKf,MAAL,CAAYiB,IAAZ,CAAiBX,IAAjB,EAAuB,UAAUS,IAAV,EAAgB;AACnC,oBAAIlB,GAAGY,GAAH,CAAOC,QAAX,EAAqB;AACjBK,2BAAOJ,KAAKK,KAAL,CAAWD,IAAX,CAAP;AACH;AACDP,yBAASO,QAAQ,IAAjB;AACH,aALD;AAMH;AACJ,KA/BkB;;AAiCnB;AACAG,aAAS,iBAAUZ,IAAV,EAAgBE,QAAhB,EAA0B;AAC/B;AACA;AACA,YAAIX,GAAGY,GAAH,CAAOC,QAAX,EAAqB;AACjB,iBAAKV,MAAL,CAAYc,EAAZ,CAAeR,IAAf,EAAqB,UAAUS,IAAV,EAAgB;AACjC,oBAAIlB,GAAGY,GAAH,CAAOC,QAAX,EAAqB;AACjBK,2BAAOJ,KAAKK,KAAL,CAAWD,IAAX,CAAP;AACH;AACDP,yBAASO,QAAQ,IAAjB;AACH,aALD;AAMH,SAPD,MAOO;AACH,iBAAKf,MAAL,CAAYiB,IAAZ,CAAiBX,IAAjB,EAAuB,UAAUS,IAAV,EAAgB;AACnC,oBAAIlB,GAAGY,GAAH,CAAOC,QAAX,EAAqB;AACjBK,2BAAOJ,KAAKK,KAAL,CAAWD,IAAX,CAAP;AACH;AACDP,yBAASO,QAAQ,IAAjB;AACH,aALD;AAMH;AACJ;AApDkB,CAAT,CAAd;;AAuDAI,OAAOvB,OAAP,GAAiBD,WAAWA,QAAX,GAAsB,IAAIC,OAAJ,EAAvC","file":"NetWork.js","sourceRoot":"../../../../assets/Script","sourcesContent":["let instance = null;\nlet Network = cc.Class({\n    properties: {\n        socket: null\n    },\n    initNetwork() {\n        let socketIo = io.connect('192.168.0.56:3000');\n        this.socket = socketIo;\n    },\n    // 发送消息给服务器并接收\n    send: function (type, sendData, callback) {\n        if (cc.sys.isNative) {\n            sendData = JSON.stringify(sendData);\n        }\n        this.socket.emit(type, sendData);\n        // 由于目前 Native 不支持 once\n        // 并且 on 是只执行一次的所以暂时先这样修改\n        if (cc.sys.isNative) {\n            this.socket.on(type, function (data) {\n                if (cc.sys.isNative) {\n                    data = JSON.parse(data);\n                }\n                callback(data || null);\n            });\n        } else {\n            this.socket.once(type, function (data) {\n                if (cc.sys.isNative) {\n                    data = JSON.parse(data);\n                }\n                callback(data || null);\n            });\n        }\n    },\n\n    // 单纯接收服务器消息\n    receive: function (type, callback) {\n        // 由于目前 Native 不支持 once\n        // 并且 on 是只执行一次的所以暂时先这样修改\n        if (cc.sys.isNative) {\n            this.socket.on(type, function (data) {\n                if (cc.sys.isNative) {\n                    data = JSON.parse(data);\n                }\n                callback(data || null);\n            });\n        } else {\n            this.socket.once(type, function (data) {\n                if (cc.sys.isNative) {\n                    data = JSON.parse(data);\n                }\n                callback(data || null);\n            });\n        }\n    }\n});\n\nwindow.Network = instance ? instance : new Network();"]}