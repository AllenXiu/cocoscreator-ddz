{"version":3,"sources":["ShowPoker.js"],"names":["POSITION_UP","POSITION_DOWN","cc","Class","extends","Component","properties","canTouch","_pokerSpriteList","_touchStart","_touchMove","onLoad","console","log","node","on","startCallback","endCallback","moveCallback","onDestroy","off","Node","EventType","TOUCH_START","TOUCH_END","TOUCH_MOVE","desTroyPokers","cards","length","pokerSprite","destroy","start","showPokers","type","startx","i","removeFromParent","push","addChild","gap","scale","x","setPosition","pokerAllDown","status","y","isChiose","color","Global","selectPokers","_getCardForTouch","touch","box","getBoundingBoxToWorld","rectContainsPoint","_checkSelectCardReserve","touchBegan","touchMoved","p1","sprite","width","Math","abs","height","rect","rectIntersectsRect","event","touches","getTouches","touchLoc","getLocation","convertToNodeSpace","index","k","selectPoker","selectCard","getComponent","card","_imageName","splice"],"mappings":";;;;;;AAAA,IAAMA,cAAc,CAApB;AACA,IAAMC,gBAAgB,CAAtB;AACAC,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACRC,kBAAU,KADF;AAERC,0BAAkB,IAFV;AAGRC,qBAAa,IAHL;AAIRC,oBAAY;AAJJ,KAHP;;AAUL;AACAC,UAXK,oBAWI;AACLC,gBAAQC,GAAR,CAAY,iBAAZ;AACA;AACA,YAAI,KAAKN,QAAT,EAAmB;AACf,iBAAKO,IAAL,CAAUC,EAAV,CAAa,YAAb,EAA2B,KAAKC,aAAhC,EAA+C,IAA/C;AACA,iBAAKF,IAAL,CAAUC,EAAV,CAAa,UAAb,EAAyB,KAAKE,WAA9B,EAA2C,IAA3C;AACA,iBAAKH,IAAL,CAAUC,EAAV,CAAa,WAAb,EAA0B,KAAKG,YAA/B,EAA6C,IAA7C;AACH;AACD,aAAKV,gBAAL,GAAwB,EAAxB;AACH,KApBI;AAsBLW,aAtBK,uBAsBO;AACR,aAAKL,IAAL,CAAUM,GAAV,CAAclB,GAAGmB,IAAH,CAAQC,SAAR,CAAkBC,WAAhC,EAA6C,KAAKP,aAAlD,EAAiE,IAAjE;AACA,aAAKF,IAAL,CAAUM,GAAV,CAAclB,GAAGmB,IAAH,CAAQC,SAAR,CAAkBE,SAAhC,EAA2C,KAAKP,WAAhD,EAA6D,IAA7D;AACA,aAAKH,IAAL,CAAUM,GAAV,CAAclB,GAAGmB,IAAH,CAAQC,SAAR,CAAkBG,UAAhC,EAA4C,KAAKP,YAAjD,EAA+D,IAA/D;AACH,KA1BI;;AA2BL;AACAQ,iBA5BK,yBA4BSC,KA5BT,EA4BgB;AACjB,YAAIA,MAAMC,MAAN,IAAgB,CAApB,EAAuB;AACnBD,oBAAQ,KAAKnB,gBAAb;AACH;AAHgB;AAAA;AAAA;;AAAA;AAIjB,iCAA0BmB,KAA1B,8HAAiC;AAAA,oBAAtBE,YAAsB;;AAC7BA,6BAAYC,OAAZ;AACH;AANgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOpB,KAnCI;AAoCLC,SApCK,mBAoCG,CAEP,CAtCI;;AAuCL;AACAC,cAxCK,sBAwCML,KAxCN,EAwCaM,IAxCb,EAwCmB;AACpB,aAAKzB,gBAAL,GAAwB,EAAxB;;AAEA,YAAI0B,SAASP,MAAMC,MAAN,GAAe,CAA5B,CAHoB,CAGW;;AAE/B,aAAK,IAAIO,IAAI,CAAb,EAAgBA,IAAIR,MAAMC,MAA1B,EAAkCO,GAAlC,EAAuC;;AAEnC,gBAAIN,gBAAcF,MAAMQ,CAAN,CAAlB;AACAN,0BAAYO,gBAAZ,CAA6B,KAA7B;AACA;AACA,iBAAK5B,gBAAL,CAAsB6B,IAAtB,CAA2BR,aAA3B;;AAEA;AACA,iBAAKf,IAAL,CAAUwB,QAAV,CAAmBT,aAAnB;AACA,gBAAII,QAAQ,CAAZ,EAAe;AACX,oBAAIM,MAAM,EAAV,CADW,CACG;AACdV,8BAAYW,KAAZ,GAAoB,GAApB;AACA,oBAAIC,IAAK,CAACP,MAAF,GAAYK,GAAZ,GAAkBJ,IAAII,GAAtB,GAA4BA,MAAM,CAA1C;AACA;AACAV,8BAAYa,WAAZ,CAAwB,CAAC,GAAD,GAAOD,CAA/B,EAAkC,CAAlC;AACH,aAND,MAMO,IAAIR,QAAQ,CAAZ,EAAe;AAClB,oBAAIM,OAAM,EAAV,CADkB,CACJ;AACdV,8BAAYW,KAAZ,GAAoB,GAApB;AACA,oBAAIC,KAAK,CAACP,MAAF,GAAYK,IAAZ,GAAkBJ,IAAII,IAAtB,GAA4BA,OAAM,CAA1C;AACA;AACAV,8BAAYa,WAAZ,CAAwB,MAAMD,EAA9B,EAAiC,CAAjC;AACH,aANM,MAMA,IAAIR,QAAQ,CAAZ,EAAe;AAClB,oBAAIM,QAAM,EAAV,CADkB,CACJ;AACdV,8BAAYW,KAAZ,GAAoB,GAApB;AACA,oBAAIC,MAAK,CAACP,MAAF,GAAYK,KAAZ,GAAkBA,QAAM,CAAxB,GAA4BJ,IAAII,KAAxC;AACA;AACAV,8BAAYa,WAAZ,CAAwBD,GAAxB,EAA2B,CAA3B;AACH,aANM,MAMA,IAAIR,QAAQ,CAAZ,EAAe;AAClB,oBAAIM,QAAM,EAAV,CADkB,CACJ;AACdV,8BAAYW,KAAZ,GAAoB,GAApB;AACA,oBAAIC,MAAK,CAACP,MAAF,GAAYK,KAAZ,GAAkBA,QAAM,CAAxB,GAA4BJ,IAAII,KAAxC;AACA;AACAV,8BAAYa,WAAZ,CAAwBD,GAAxB,EAA2B,CAA3B;AACH,aANM,MAMA;AACH,oBAAIF,QAAM,EAAV,CADG,CACW;AACdV,8BAAYW,KAAZ,GAAoB,CAApB;AACA,oBAAIC,MAAK,CAACP,MAAF,GAAYK,KAAZ,GAAkBJ,IAAII,KAAtB,GAA4BA,QAAM,CAA1C;AACA;AACAV,8BAAYa,WAAZ,CAAwBD,GAAxB,EAA2B,CAA3B;AACH;AAEJ;AAEJ,KAxFI;;AAyFL;;AAEA;;;AAGAE,gBA9FK,0BA8FU;AACX,aAAK,IAAIR,CAAT,IAAc,KAAK3B,gBAAnB,EAAqC;AACjC,gBAAIqB,gBAAc,KAAKrB,gBAAL,CAAsB2B,CAAtB,CAAlB;AACA,gBAAIN,cAAYe,MAAZ,KAAuB5C,WAA3B,EACI6B,cAAYgB,CAAZ,IAAiB,EAAjB;;AAEJhB,0BAAYe,MAAZ,GAAqB3C,aAArB;AACA4B,0BAAYiB,QAAZ,GAAuB,KAAvB;AACA;AACAjB,0BAAYkB,KAAZ,GAAoB,IAAI7C,GAAG6C,KAAP,CAAa,GAAb,EAAkB,GAAlB,EAAuB,GAAvB,CAApB;;AAEAC,mBAAOC,YAAP,GAAsB,EAAtB;AACH;AACJ,KA3GI;;;AA6GL;AACAC,oBA9GK,4BA8GYC,KA9GZ,EA8GmB;AACpB,aAAK,IAAIhB,IAAI,KAAK3B,gBAAL,CAAsBoB,MAAtB,GAA+B,CAA5C,EAA+CO,KAAK,CAApD,EAAuDA,GAAvD,EAA4D;AAAE;AAC1D,gBAAIN,gBAAc,KAAKrB,gBAAL,CAAsB2B,CAAtB,CAAlB;AACA;AACA,gBAAIiB,MAAMvB,cAAYwB,qBAAZ,EAAV;AACA,gBAAInD,GAAGoD,iBAAH,CAAqBF,GAArB,EAA0BD,KAA1B,CAAJ,EAAsC;AAClC;AACAtB,8BAAYiB,QAAZ,GAAuB,IAAvB;AACAjB,8BAAYkB,KAAZ,GAAoB,IAAI7C,GAAG6C,KAAP,CAAa,GAAb,EAAkB,GAAlB,EAAuB,GAAvB,CAApB;;AAEA;AACA,uBANkC,CAM1B;AACX,aAPD,MAOO;AACH;AACH;AAEJ;AACJ,KA/HI;;;AAiIL;AACAQ,2BAlIK,mCAkImBC,UAlInB,EAkI+BC,UAlI/B,EAkI2C;AAC5C;AACA,YAAIC,KAAKF,WAAWf,CAAX,GAAegB,WAAWhB,CAA1B,GAA8Be,UAA9B,GAA2CC,UAApD;;AAEA,YAAIC,OAAOD,UAAX,EAAuB;AACnB;AACA,iBAAK,IAAItB,CAAT,IAAc,KAAK3B,gBAAnB,EAAqC;AACjC,oBAAImD,SAAS,KAAKnD,gBAAL,CAAsB2B,CAAtB,CAAb;AACA,oBAAIuB,GAAGjB,CAAH,GAAOkB,OAAOlB,CAAd,GAAkB,CAAC,EAAvB,EAA2B;AAAE;AACzBZ,gCAAYkB,KAAZ,GAAoB,IAAI7C,GAAG6C,KAAP,CAAa,GAAb,EAAkB,GAAlB,EAAuB,GAAvB,CAApB;AACA;AACAY,2BAAOb,QAAP,GAAkB,KAAlB;AACH;AACJ;AACJ,SAVD,MAUO;AACH,gBAAIc,QAAQC,KAAKC,GAAL,CAASN,WAAWf,CAAX,GAAegB,WAAWhB,CAAnC,CAAZ;AACA,gBAAIsB,SAASF,KAAKC,GAAL,CAASN,WAAWX,CAAX,GAAeY,WAAWZ,CAAnC,IAAwC,CAAxC,GAA4CgB,KAAKC,GAAL,CAASN,WAAWX,CAAX,GAAeY,WAAWZ,CAAnC,CAA5C,GAAoF,CAAjG;AACA,gBAAImB,OAAO9D,GAAG8D,IAAH,CAAQN,GAAGjB,CAAX,EAAciB,GAAGb,CAAjB,EAAoBe,KAApB,EAA2BG,MAA3B,CAAX;;AAEA,iBAAK,IAAI5B,KAAI,CAAb,EAAgBA,KAAI,KAAK3B,gBAAL,CAAsBoB,MAA1C,EAAkDO,IAAlD,EAAuD;AACnD,oBAAI,CAACjC,GAAG+D,kBAAH,CAAsB,KAAKzD,gBAAL,CAAsB2B,EAAtB,EAAyBkB,qBAAzB,EAAtB,EAAwEW,IAAxE,CAAL,EAAoF;AAChF,yBAAKxD,gBAAL,CAAsB2B,EAAtB,EAAyBW,QAAzB,GAAoC,KAApC;AACAjB,gCAAYkB,KAAZ,GAAoB,IAAI7C,GAAG6C,KAAP,CAAa,GAAb,EAAkB,GAAlB,EAAuB,GAAvB,CAApB;AACA;AACH;AACJ;AACJ;AAEJ,KA9JI;;AA+JL;;;;AAIA/B,iBAnKK,yBAmKSkD,KAnKT,EAmKgB;AACjB;AACA,YAAIC,UAAUD,MAAME,UAAN,EAAd;AACA,YAAIC,WAAWF,QAAQ,CAAR,EAAWG,WAAX,EAAf;AACA;AACA,aAAK7D,WAAL,GAAmB,KAAKK,IAAL,CAAUyD,kBAAV,CAA6BF,QAA7B,CAAnB,CALiB,CAK0C;AAC3D;AACA,aAAKnB,gBAAL,CAAsB,KAAKzC,WAA3B;AACH,KA3KI;AA8KLS,gBA9KK,wBA8KQgD,KA9KR,EA8Ke;AAChB,YAAIC,UAAUD,MAAME,UAAN,EAAd;AACA,YAAIC,WAAWF,QAAQ,CAAR,EAAWG,WAAX,EAAf;AACA;AACA,aAAK5D,UAAL,GAAkB,KAAKI,IAAL,CAAUyD,kBAAV,CAA6BF,QAA7B,CAAlB,CAJgB,CAI0C;AAC1D,aAAKnB,gBAAL,CAAsB,KAAKxC,UAA3B;AACA;AACA;AACH,KAtLI;AAyLLO,eAzLK,uBAyLOiD,KAzLP,EAyLc;AACf;;AAEA,aAAK,IAAI/B,IAAI,CAAb,EAAgBA,IAAI,KAAK3B,gBAAL,CAAsBoB,MAA1C,EAAkDO,GAAlD,EAAuD;AACnD,gBAAIN,gBAAc,KAAKrB,gBAAL,CAAsB2B,CAAtB,CAAlB;;AAEA,gBAAIN,cAAYiB,QAAhB,EAA0B;AACtBjB,8BAAYiB,QAAZ,GAAuB,KAAvB;AACA;AACAjB,8BAAYkB,KAAZ,GAAoB,IAAI7C,GAAG6C,KAAP,CAAa,GAAb,EAAkB,GAAlB,EAAuB,GAAvB,CAApB;AACA,oBAAIlB,cAAYe,MAAZ,KAAuB5C,WAA3B,EAAwC;AACpC6B,kCAAYe,MAAZ,GAAqB3C,aAArB;AACA4B,kCAAYgB,CAAZ,IAAiB,EAAjB;;AAEA;AACA,wBAAI2B,QAAQ,CAAC,CAAb;AACA,yBAAK,IAAIC,CAAT,IAAczB,OAAOC,YAArB,EAAmC;AAC/B,4BAAIyB,cAAc1B,OAAOC,YAAP,CAAoBwB,CAApB,CAAlB;AACA;AACA,4BAAIE,aAAaD,YAAYE,YAAZ,CAAyB,OAAzB,CAAjB;AACA;AACA,4BAAIC,OAAOhD,cAAY+C,YAAZ,CAAyB,OAAzB,CAAX;AACA,4BAAID,WAAWG,UAAX,IAAyBD,KAAKC,UAAlC,EACIN,QAAQC,CAAR;AACP;AACD,wBAAID,SAAS,CAAC,CAAd,EACIxB,OAAOC,YAAP,CAAoB8B,MAApB,CAA2BP,KAA3B,EAAkC,CAAlC;AACP,iBAjBD,MAiBO;AACH3C,kCAAYe,MAAZ,GAAqB5C,WAArB;AACA6B,kCAAYgB,CAAZ,IAAiB,EAAjB;;AAEA;AACAG,2BAAOC,YAAP,CAAoBZ,IAApB,CAAyBR,aAAzB;AACH;AACJ,aA5BD,MA4BO,CAEN;AACJ;AACJ;AA/NI;;AAiOL;AAjOJ","file":"ShowPoker.js","sourceRoot":"../../../../assets/Script","sourcesContent":["const POSITION_UP = 1;\nconst POSITION_DOWN = 2;\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        canTouch: false,\n        _pokerSpriteList: null,\n        _touchStart: null,\n        _touchMove: null,\n    },\n\n    // use this for initialization\n    onLoad() {\n        console.log('mynode on load.');\n        //只有用户手牌允许点击\n        if (this.canTouch) {\n            this.node.on('touchstart', this.startCallback, this);\n            this.node.on('touchend', this.endCallback, this);\n            this.node.on('touchmove', this.moveCallback, this);\n        }\n        this._pokerSpriteList = [];\n    },\n\n    onDestroy() {\n        this.node.off(cc.Node.EventType.TOUCH_START, this.startCallback, this);\n        this.node.off(cc.Node.EventType.TOUCH_END, this.endCallback, this);\n        this.node.off(cc.Node.EventType.TOUCH_MOVE, this.moveCallback, this);\n    },\n    //销毁Poker\n    desTroyPokers(cards) {\n        if (cards.length == 0) {\n            cards = this._pokerSpriteList;\n        }\n        for (const pokerSprite of cards) {\n            pokerSprite.destroy();\n        }\n    },\n    start() {\n\n    },\n    /* 展示poker */\n    showPokers(cards, type) {\n        this._pokerSpriteList = [];\n\n        let startx = cards.length / 2; //开始x坐标\n\n        for (let i = 0; i < cards.length; i++) {\n\n            let pokerSprite = cards[i];\n            pokerSprite.removeFromParent(false);\n            //存储Poker节点\n            this._pokerSpriteList.push(pokerSprite);\n\n            // var Poker = pokerSprite.getComponent('Poker');\n            this.node.addChild(pokerSprite);\n            if (type == 0) {\n                let gap = 18; //牌间隙\n                pokerSprite.scale = 0.8;\n                let x = (-startx) * gap + i * gap + gap / 2;\n                // console.log(x);\n                pokerSprite.setPosition(-150 + x, 0);\n            } else if (type == 1) {\n                let gap = 18; //牌间隙\n                pokerSprite.scale = 0.8;\n                let x = (-startx) * gap + i * gap + gap / 2;\n                // console.log(x);\n                pokerSprite.setPosition(150 + x, 0);\n            } else if (type == 3) {\n                let gap = 80; //牌间隙\n                pokerSprite.scale = 0.5;\n                let x = (-startx) * gap + gap / 2 + i * gap;\n                // console.log(x);\n                pokerSprite.setPosition(x, 0);\n            } else if (type == 4) {\n                let gap = 12; //牌间隙\n                pokerSprite.scale = 0.6;\n                let x = (-startx) * gap + gap / 2 + i * gap;\n                // console.log(x);\n                pokerSprite.setPosition(x, 0);\n            } else {\n                let gap = 25; //牌间隙\n                pokerSprite.scale = 1;\n                let x = (-startx) * gap + i * gap + gap / 2;\n                // console.log(x);\n                pokerSprite.setPosition(x, 0);\n            }\n\n        }\n\n    },\n    //点击事件\n\n    /**\n     * 收起所有牌\n     */\n    pokerAllDown() {\n        for (let i in this._pokerSpriteList) {\n            let pokerSprite = this._pokerSpriteList[i];\n            if (pokerSprite.status === POSITION_UP)\n                pokerSprite.y -= 20;\n\n            pokerSprite.status = POSITION_DOWN;\n            pokerSprite.isChiose = false;\n            // pokerSprite.opacity = 255;\n            pokerSprite.color = new cc.color(255, 255, 255);\n\n            Global.selectPokers = [];\n        }\n    },\n\n    //点击到牌\n    _getCardForTouch(touch) {\n        for (let i = this._pokerSpriteList.length - 1; i >= 0; i--) { // 需要倒序\n            let pokerSprite = this._pokerSpriteList[i];\n            //全屏坐标系\n            let box = pokerSprite.getBoundingBoxToWorld();\n            if (cc.rectContainsPoint(box, touch)) {\n                // console.log('in');\n                pokerSprite.isChiose = true;\n                pokerSprite.color = new cc.color(200, 200, 200);\n\n                // pokerSprite.opacity = 185;\n                return; //关键， 找到一个就返回\n            } else {\n                //this.pokerAllDown();\n            }\n\n        }\n    },\n\n    //检测牌复原\n    _checkSelectCardReserve(touchBegan, touchMoved) {\n        // console.log('_checkSelectCardReserve');\n        let p1 = touchBegan.x < touchMoved.x ? touchBegan : touchMoved;\n\n        if (p1 === touchMoved) {\n            // for (let i = this._pokerSpriteList.length - 1; i >= 0; i--) {\n            for (let i in this._pokerSpriteList) {\n                let sprite = this._pokerSpriteList[i];\n                if (p1.x - sprite.x > -25) { //\n                    pokerSprite.color = new cc.color(255, 255, 255);\n                    // sprite.opacity = 255;\n                    sprite.isChiose = false;\n                }\n            }\n        } else {\n            let width = Math.abs(touchBegan.x - touchMoved.x);\n            let height = Math.abs(touchBegan.y - touchMoved.y) > 5 ? Math.abs(touchBegan.y - touchMoved.y) : 5;\n            let rect = cc.rect(p1.x, p1.y, width, height);\n\n            for (let i = 0; i < this._pokerSpriteList.length; i++) {\n                if (!cc.rectIntersectsRect(this._pokerSpriteList[i].getBoundingBoxToWorld(), rect)) {\n                    this._pokerSpriteList[i].isChiose = false;\n                    pokerSprite.color = new cc.color(255, 255, 255);\n                    // this._pokerSpriteList[i].opacity = 255;\n                }\n            }\n        }\n\n    },\n    /**\n     * \n     * @param {点击事件} event \n     */\n    startCallback(event) {\n        // console.log(touchLoc.x + \",\" + touchLoc.y)\n        let touches = event.getTouches();\n        let touchLoc = touches[0].getLocation();\n        // console.log(\"start:\" + touchLoc.x + \",\" + touchLoc.y)\n        this._touchStart = this.node.convertToNodeSpace(touchLoc); //将坐标转换为当前节点坐标\n        // console.log(this._touchStart.x + \",\" + this._touchStart.y)\n        this._getCardForTouch(this._touchStart);\n    },\n\n\n    moveCallback(event) {\n        let touches = event.getTouches();\n        let touchLoc = touches[0].getLocation();\n        // console.log(\"move:\" + touchLoc.x + \",\" + touchLoc.y)\n        this._touchMove = this.node.convertToNodeSpace(touchLoc); //将坐标转换为当前节点坐标\n        this._getCardForTouch(this._touchMove);\n        //当选过头了，往回拖的时候取消选择\n        // this._checkSelectCardReserve(this._touchStart, this._touchMove);\n    },\n\n\n    endCallback(event) {\n        // console.log(\"end\")\n\n        for (let i = 0; i < this._pokerSpriteList.length; i++) {\n            let pokerSprite = this._pokerSpriteList[i];\n\n            if (pokerSprite.isChiose) {\n                pokerSprite.isChiose = false;\n                // pokerSprite.opacity = 255;\n                pokerSprite.color = new cc.color(255, 255, 255);\n                if (pokerSprite.status === POSITION_UP) {\n                    pokerSprite.status = POSITION_DOWN;\n                    pokerSprite.y -= 20;\n\n                    //移除所选牌\n                    let index = -1;\n                    for (let k in Global.selectPokers) {\n                        let selectPoker = Global.selectPokers[k];\n                        //选中的卡牌\n                        var selectCard = selectPoker.getComponent('Poker');\n                        //数组里的卡牌\n                        var card = pokerSprite.getComponent('Poker');\n                        if (selectCard._imageName == card._imageName)\n                            index = k;\n                    }\n                    if (index != -1)\n                        Global.selectPokers.splice(index, 1);\n                } else {\n                    pokerSprite.status = POSITION_UP;\n                    pokerSprite.y += 20;\n\n                    //添加选择的牌\n                    Global.selectPokers.push(pokerSprite);\n                }\n            } else {\n\n            }\n        }\n    },\n\n    // update (dt) {},\n});"]}