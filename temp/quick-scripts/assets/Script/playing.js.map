{"version":3,"sources":["playing.js"],"names":["PokerObj","require","PlayerType","cc","Enum","left","right","player","dipai","Class","extends","Component","properties","poker","Prefab","startBtn","Button","pokerSpriteFrameMap","default","visible","allPokers","leftPokers","rightPokers","playerPokers","dipaiPokers","leftPokersOut","rightPokersOut","playerPokersOut","onLoad","loadRes","self","loader","SpriteAtlas","err","assets","console","log","sflist","getSpriteFrames","i","length","sf","_name","startPoker","node","active","loadAllPoker","pokerSprite","instantiate","pokerTypes","getComponent","getCarAnalyseInfo","shuffleArray","array","j","Math","random","temp","startUp","bubbleSortCards","showPokers","startDown","startPlayer","startDipai","Poker","pokerName","creatCard","_imageName","Sprite","spriteFrame","cards","size","pokerSpriteOne","PokerOne","pokerSpriteTwo","PokerTwo","gradeOne","_grade","gradeTwo","isExchange","type1","_bigType","type2","CardBigType","HEI_TAO","HONG_TAO","MEI_HUA","FANG_KUAI","type","startx","addChild","gap","scale","x","setPosition","start"],"mappings":"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","file":"playing.js","sourceRoot":"../../../../assets/Script","sourcesContent":["// Learn cc.Class:\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/class.html\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/class/index.html\n// Learn Attribute:\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/reference/attributes/index.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/life-cycle-callbacks/index.html\nvar PokerObj = require(\"Poker\");\n\nvar PlayerType = cc.Enum({\n    left: 0,\n    right: -1,\n    player: -1,\n    dipai: -1,\n})\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        poker: cc.Prefab, //扑克\n        startBtn: cc.Button, //开始按钮\n        pokerSpriteFrameMap: {\n            default: {},\n            visible: false,\n        },\n        allPokers: [], //所有牌\n        leftPokers: [], //左边牌\n        rightPokers: [], //右边牌\n        playerPokers: [], //玩家牌\n        dipaiPokers: [], //底牌\n        leftPokersOut: [], //左边打出牌\n        rightPokersOut: [], //右边打出牌\n        playerPokersOut: [], //玩家打出牌\n\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad() {\n        this.loadRes();\n    },\n\n    //加载卡片资源\n    loadRes() {\n\n        let self = this;\n        cc.loader.loadRes('poker', cc.SpriteAtlas, function (err, assets) {\n            console.log('====' + assets);\n\n            let sflist = assets.getSpriteFrames();\n            for (let i = 0; i < sflist.length; i++) {\n                let sf = sflist[i];\n                self.pokerSpriteFrameMap[sf._name] = sf;\n            }\n            console.log(\"获取完全部Poker\")\n        });\n\n    },\n    //测试获取Poker\n    startPoker() {\n        this.startBtn.node.active = false;\n        this.loadAllPoker();\n        \n        let pokerSprite = cc.instantiate(this.poker);\n        var pokerTypes = pokerSprite.getComponent('pokerTypes');\n        pokerTypes.getCarAnalyseInfo(this.playerPokers);\n    },\n    //洗牌算法\n    shuffleArray(array) {\n        for (var i = array.length - 1; i > 0; i--) {\n            // 在正数的时候相当于Math.floor()向下取整,负数的时候相当于Math.ceil()：\n            var j = (Math.random() * (i + 1)) | 0;\n            // console.log(j);\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n        return array;\n    },\n    //生成上家\n    startUp() {\n        for (let i = 0; i < 16; i++) {\n            let pokerSprite = this.allPokers[i + 16 + 3];\n            this.leftPokers[i] = pokerSprite;\n        }\n        this.bubbleSortCards(this.leftPokers);\n        this.showPokers(this.leftPokers, PlayerType.left);\n    },\n    //生成下家\n    startDown() {\n        for (let i = 0; i < 16; i++) {\n            let pokerSprite = this.allPokers[i + 32 + 3];\n            this.rightPokers[i] = pokerSprite;\n        }\n        this.bubbleSortCards(this.rightPokers);\n        this.showPokers(this.rightPokers, PlayerType.right);\n    },\n    //生成当前玩家\n    startPlayer() {\n        for (let i = 0; i < 16; i++) {\n            let pokerSprite = this.allPokers[i + 3];\n            this.playerPokers[i] = pokerSprite;\n        }\n        this.bubbleSortCards(this.playerPokers);\n        this.showPokers(this.playerPokers, PlayerType.player);\n    },\n    //生成三张底牌\n    startDipai() {\n        for (let i = 0; i < 3; i++) {\n            let pokerSprite = this.allPokers[i];\n            this.dipaiPokers[i] = pokerSprite;\n        }\n        this.bubbleSortCards(this.dipaiPokers);\n        this.showPokers(this.dipaiPokers, PlayerType.dipai);\n    },\n\n    loadAllPoker() {\n        for (let i = 0; i < 54; i++) {\n\n            let pokerSprite = cc.instantiate(this.poker);\n            var Poker = pokerSprite.getComponent('Poker');\n            var pokerName = Poker.creatCard(i + 1)._imageName;\n            // console.log(\"名称\" + pokerName);\n            pokerSprite.getComponent(cc.Sprite).spriteFrame = this.pokerSpriteFrameMap[pokerName];\n\n            this.allPokers[i] = pokerSprite;\n        }\n        //洗牌\n        this.allPokers = this.shuffleArray(this.allPokers);\n        //发牌\n        this.startUp();\n        this.startPlayer();\n        this.startDown();\n        this.startDipai();\n    },\n    /** \n     * 对牌进行排序，从小到大，使用冒泡排序，此种方法不是很好 \n     * \n     * @param cards \n     *            牌 \n     */\n    bubbleSortCards(cards) {\n        if (cards == null) {\n            return cards;\n        }\n        let size = cards.length;\n        // 冒泡排序,从左到右，从小到大  \n        for (var i = 0; i < size; i++) {\n            for (var j = 0; j < size - 1 - i; j++) {\n                let pokerSpriteOne = cards[j];\n                let PokerOne = pokerSpriteOne.getComponent('Poker');\n                let pokerSpriteTwo = cards[j + 1];\n                let PokerTwo = pokerSpriteTwo.getComponent('Poker');\n\n                var gradeOne = PokerOne._grade;\n                var gradeTwo = PokerTwo._grade;\n\n                var isExchange = false;\n                if (gradeOne < gradeTwo) {\n                    isExchange = true;\n                } else if (gradeOne == gradeTwo) {\n                    // 2张牌的grade相同  \n                    var type1 = PokerOne._bigType;\n                    var type2 = PokerTwo._bigType;\n\n                    // 从左到右，方块、梅花、红桃、黑桃  \n                    if (type1 == PokerObj.CardBigType.HEI_TAO) {\n                        isExchange = true;\n                    } else if (type1 == PokerObj.CardBigType.HONG_TAO) {\n                        if (type2 == PokerObj.CardBigType.MEI_HUA ||\n                            type2 == PokerObj.CardBigType.FANG_KUAI) {\n                            isExchange = true;\n                        }\n                    } else if (type1 == PokerObj.CardBigType.MEI_HUA) {\n                        if (type2 == PokerObj.CardBigType.FANG_KUAI) {\n                            isExchange = true;\n                        }\n                    }\n                }\n                if (isExchange) {\n                    cards[j + 1] = pokerSpriteOne;\n                    cards[j] = pokerSpriteTwo;\n                }\n            }\n        }\n        // console.log(\"我的牌\"+ cards);\n        return cards;\n    },\n\n    //展示Poker\n    showPokers(cards, type) {\n        let startx = cards.length / 2; //开始x坐标\n        for (let i = 0; i < cards.length; i++) {\n\n            let pokerSprite = cards[i];\n            var Poker = pokerSprite.getComponent('Poker');\n            this.node.addChild(pokerSprite);\n            if (type == PlayerType.left) {\n                let gap = 12; //牌间隙\n                pokerSprite.scale = 0.6;\n                let x = (-startx) * gap + i * gap + gap/2;\n                // console.log(x);\n                pokerSprite.setPosition(-300 + x, 100);\n            } else if (type == PlayerType.right) {\n                let gap = 12; //牌间隙\n                pokerSprite.scale = 0.6;\n                let x = (-startx) * gap + i * gap + gap/2;\n                // console.log(x);\n                pokerSprite.setPosition(300 + x, 100);\n            } else if (type == PlayerType.dipai) {\n                let gap = 100; //牌间隙\n                pokerSprite.scale = 0.6;\n                let x = (-startx) * gap + gap/2 + i * gap;\n                // console.log(x);\n                pokerSprite.setPosition(x, 300);\n            } else {\n                let gap = 25; //牌间隙\n                pokerSprite.scale = 1;\n                let x = (-startx) * gap + i * gap + gap/2;\n                // console.log(x);\n                pokerSprite.setPosition(x, -220);\n            }\n\n        }\n\n    },\n    start() {\n\n    },\n\n    // update (dt) {},\n});"]}