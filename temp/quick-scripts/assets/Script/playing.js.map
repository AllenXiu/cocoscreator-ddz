{"version":3,"sources":["playing.js"],"names":["PokerObj","require","PlayerType","cc","Enum","left","right","player","dipai","shoupai","Class","extends","Component","properties","poker","Prefab","allPokers","leftPokers","rightPokers","playerPokers","dipaiPokers","leftPokersOut","rightPokersOut","playerPokersOut","pokerSpriteFrameMap","default","visible","maskBackground","Node","startBtn","Button","leftCount","Label","leftbuchu","leftShowPoker","rightCount","rightShowPoker","rightbuchu","playerHandCards","playerOutCards","playerAction","dipaiShowPoker","onLoad","socketAction","loadRes","socket","io","connect","self","on","msg","console","log","cards","loadAllPoker","refreshCount","showCards","loader","SpriteAtlas","err","assets","sflist","getSpriteFrames","i","length","sf","_name","startPoker","active","enabled","emit","shuffleArray","array","j","Math","random","temp","startUp","pokerSprite","bubbleSortCards","startDown","startPlayer","startDipai","type","showPoker","getComponent","showPokers","originCards","instantiate","Poker","pokerName","creatCard","_imageName","Sprite","spriteFrame","size","pokerSpriteOne","PokerOne","pokerSpriteTwo","PokerTwo","gradeOne","_grade","gradeTwo","isExchange","type1","_bigType","type2","CardBigType","HEI_TAO","HONG_TAO","MEI_HUA","FANG_KUAI","string","start"],"mappings":"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","file":"playing.js","sourceRoot":"../../../../assets/Script","sourcesContent":["// Learn cc.Class:\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/class.html\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/class/index.html\n// Learn Attribute:\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/reference/attributes.html\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/reference/attributes/index.html\n// Learn life-cycle callbacks:\n//  - [Chinese] http://www.cocos.com/docs/creator/scripting/life-cycle-callbacks.html\n//  - [English] http://www.cocos2d-x.org/docs/editors_and_tools/creator-chapters/scripting/life-cycle-callbacks/index.html\nvar PokerObj = require(\"Poker\");\n\nvar PlayerType = cc.Enum({\n    left: 0,\n    right: -1,\n    player: -1,\n    dipai: -1,\n    shoupai: -1\n})\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        poker: cc.Prefab, //扑克\n        allPokers: [], //所有牌\n        leftPokers: [], //左边牌\n        rightPokers: [], //右边牌\n        playerPokers: [], //玩家牌\n        dipaiPokers: [], //底牌\n        leftPokersOut: [], //左边打出牌\n        rightPokersOut: [], //右边打出牌\n        playerPokersOut: [], //玩家打出牌\n        pokerSpriteFrameMap: {\n            default: {},\n            visible: false,\n        },\n\n        //控制的东西\n        maskBackground: cc.Node, //开始前的遮罩\n        startBtn: cc.Button, //开始按钮\n        leftCount: cc.Label, //左边数量\n        leftbuchu: cc.Label, //左边不出\n        leftShowPoker: cc.Node, //左边展示Poker\n        rightCount: cc.Label, //右边数量\n        rightShowPoker: cc.Node, //右边展示Poker\n        rightbuchu: cc.Label, //右边不出\n\n        playerHandCards: cc.Node, //玩家手牌\n        playerOutCards: cc.Node, //玩家出牌\n        playerAction: cc.Node, //玩家按钮\n\n        dipaiShowPoker: cc.Node, //右边展示Poker\n    },\n\n    // LIFE-CYCLE CALLBACKS:\n\n    onLoad() {\n        this.socketAction();\n        this.loadRes();\n    },\n    /**\n     * socket处理\n     */\n    socketAction() {\n        let socket = io.connect('192.168.0.56:3000');\n        this.socket = socket;\n        let self = this;\n        socket.on('hello', function (msg) {\n            console.log(msg);\n        });\n        //获取所有Poker\n        socket.on('loadCards', function (cards) {\n            self.loadAllPoker(cards);\n            self.refreshCount();\n            self.showCards(PlayerType.player);\n        });\n\n    },\n    //加载卡片资源\n    loadRes() {\n\n        let self = this;\n        cc.loader.loadRes('poker', cc.SpriteAtlas, function (err, assets) {\n            console.log('====' + assets);\n\n            let sflist = assets.getSpriteFrames();\n            for (let i = 0; i < sflist.length; i++) {\n                let sf = sflist[i];\n                self.pokerSpriteFrameMap[sf._name] = sf;\n            }\n            console.log(\"获取完全部Poker\")\n        });\n\n    },\n    //测试获取Poker\n    startPoker() {\n        //隐藏控件\n        this.maskBackground.active = false;\n        this.leftbuchu.enabled = false;\n        this.rightbuchu.enabled = false\n        this.playerAction.active = false;\n        //请求服务器生成Poker\n        this.socket.emit('getAllCards', \"\");\n        // this.loadAllPoker();\n        // // let pokerSprite = cc.instantiate(this.poker);\n        // // var pokerTypes = pokerSprite.getComponent('pokerTypes');\n        // // pokerTypes.getCarAnalyseInfo(this.playerPokers);\n        // this.refreshCount();\n        // this.showCards(PlayerType.player);\n\n    },\n    //洗牌算法\n    shuffleArray(array) {\n        for (var i = array.length - 1; i > 0; i--) {\n            // 在正数的时候相当于Math.floor()向下取整,负数的时候相当于Math.ceil()：\n            var j = (Math.random() * (i + 1)) | 0;\n            // console.log(j);\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n        return array;\n    },\n    //生成上家\n    startUp() {\n        for (let i = 0; i < 16; i++) {\n            let pokerSprite = this.allPokers[i + 16 + 3];\n            this.leftPokers[i] = pokerSprite;\n        }\n        this.bubbleSortCards(this.leftPokers);\n        // this.showPokers(this.leftPokers, PlayerType.left);\n\n    },\n    //生成下家\n    startDown() {\n        for (let i = 0; i < 16; i++) {\n            let pokerSprite = this.allPokers[i + 32 + 3];\n            this.rightPokers[i] = pokerSprite;\n        }\n        this.bubbleSortCards(this.rightPokers);\n        // this.showPokers(this.rightPokers, PlayerType.right);\n\n    },\n    //生成当前玩家\n    startPlayer() {\n        for (let i = 0; i < 16; i++) {\n            let pokerSprite = this.allPokers[i + 3];\n            this.playerPokers[i] = pokerSprite;\n        }\n        this.bubbleSortCards(this.playerPokers);\n        // this.showPokers(this.playerPokers, PlayerType.player);\n\n\n    },\n    //生成三张底牌\n    startDipai() {\n        for (let i = 0; i < 3; i++) {\n            let pokerSprite = this.allPokers[i];\n            this.dipaiPokers[i] = pokerSprite;\n        }\n        this.bubbleSortCards(this.dipaiPokers);\n        // this.showPokers(this.dipaiPokers, PlayerType.dipai);\n\n    },\n    showCards(type) {\n        if (type == PlayerType.left) {\n            var showPoker = this.leftShowPoker.getComponent('ShowPoker');\n            showPoker.showPokers(this.leftPokers, PlayerType.left);\n        } else if (type == PlayerType.right) {\n            var showPoker = this.rightShowPoker.getComponent('ShowPoker');\n            showPoker.showPokers(this.rightPokers, PlayerType.right);\n        } else if (type == PlayerType.player) {\n            var showPoker = this.playerHandCards.getComponent('ShowPoker');\n            showPoker.showPokers(this.playerPokers, PlayerType.player);\n        } else if (type == PlayerType.shoupai) {\n            var showPoker = this.playerOutCards.getComponent('ShowPoker');\n            showPoker.showPokers(cards, PlayerType.shoupai);\n        } else {\n            var showPoker = this.dipaiShowPoker.getComponent('ShowPoker');\n            showPoker.showPokers(this.dipaiPokers, PlayerType.dipai);\n        }\n    },\n\n    loadAllPoker(originCards) {\n        for (let i = 0; i < originCards.length; i++) {\n\n            let pokerSprite = cc.instantiate(this.poker);\n            var Poker = pokerSprite.getComponent('Poker');\n            var pokerName = Poker.creatCard(originCards[i])._imageName;\n            // console.log(\"名称\" + pokerName);\n            pokerSprite.getComponent(cc.Sprite).spriteFrame = this.pokerSpriteFrameMap[pokerName];\n\n            this.allPokers[i] = pokerSprite;\n        }\n        //洗牌\n        this.allPokers = this.shuffleArray(this.allPokers);\n        //发牌\n        this.startDipai();\n        this.startUp();\n        this.startPlayer();\n        this.startDown();\n\n    },\n    /** \n     * 对牌进行排序，从小到大，使用冒泡排序，此种方法不是很好 \n     * \n     * @param cards \n     *            牌 \n     */\n    bubbleSortCards(cards) {\n        if (cards == null) {\n            return cards;\n        }\n        let size = cards.length;\n        // 冒泡排序,从左到右，从小到大  \n        for (var i = 0; i < size; i++) {\n            for (var j = 0; j < size - 1 - i; j++) {\n                let pokerSpriteOne = cards[j];\n                let PokerOne = pokerSpriteOne.getComponent('Poker');\n                let pokerSpriteTwo = cards[j + 1];\n                let PokerTwo = pokerSpriteTwo.getComponent('Poker');\n\n                var gradeOne = PokerOne._grade;\n                var gradeTwo = PokerTwo._grade;\n\n                var isExchange = false;\n                if (gradeOne < gradeTwo) {\n                    isExchange = true;\n                } else if (gradeOne == gradeTwo) {\n                    // 2张牌的grade相同  \n                    var type1 = PokerOne._bigType;\n                    var type2 = PokerTwo._bigType;\n\n                    // 从左到右，方块、梅花、红桃、黑桃  \n                    if (type1 == PokerObj.CardBigType.HEI_TAO) {\n                        isExchange = true;\n                    } else if (type1 == PokerObj.CardBigType.HONG_TAO) {\n                        if (type2 == PokerObj.CardBigType.MEI_HUA ||\n                            type2 == PokerObj.CardBigType.FANG_KUAI) {\n                            isExchange = true;\n                        }\n                    } else if (type1 == PokerObj.CardBigType.MEI_HUA) {\n                        if (type2 == PokerObj.CardBigType.FANG_KUAI) {\n                            isExchange = true;\n                        }\n                    }\n                }\n                if (isExchange) {\n                    cards[j + 1] = pokerSpriteOne;\n                    cards[j] = pokerSpriteTwo;\n                }\n            }\n        }\n        // console.log(\"我的牌\"+ cards);\n        return cards;\n    },\n    //刷新显示数量\n    refreshCount() {\n        this.leftCount.string = \"\" + this.leftPokers.length;\n        this.rightCount.string = \"\" + this.rightPokers.length;\n    },\n\n    start() {\n\n    },\n\n    // update (dt) {\n\n    // },\n});"]}